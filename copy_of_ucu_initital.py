# -*- coding: utf-8 -*-
"""Copy of UCU_initital.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_eGKU2SdcQ8MhJh-hbrf0psCUM0wwoiv
"""

import streamlit as st
import pandas as pd


# Set up the Streamlit page
st.set_page_config(page_title="Google Drive File Uploader", layout="wide")
st.title("Google Drive File Uploader and Data Processor")
st.write("Please upload the required files into their respective sections.")



# File upload sections
st.subheader("Member Outreach File")
uploaded_outreach = st.file_uploader("Upload Member Outreach File (Excel)", type=["xlsx", "csv"])


st.subheader("Event Debrief File")
uploaded_event = st.file_uploader("Upload Event Debrief File (Excel)", type=["xlsx" , "csv"])


if uploaded_outreach and uploaded_event:
   try:
       # Load Outreach File
       st.write("Processing Outreach File...")
       outreach_xl = pd.ExcelFile(uploaded_outreach)
       outreach_sheet_names = outreach_xl.sheet_names
       st.write(f"Outreach Sheet Names Found: {outreach_sheet_names}")


       # Predefined target sheets
       target_sheets = [
           'Irvine', 'SCU', 'LMU', 'UTA', 'SMC', 'Davis',
           'Pepperdine', 'UCLA', 'GT', 'San Diego',
           'MISC Schools', 'Template'
       ]


       # Combine data from all target sheets
       outreach_dataframes = []
       for sheet_name in target_sheets:
           if sheet_name in outreach_sheet_names:
               try:
                   temp_df = pd.read_excel(uploaded_outreach, sheet_name=sheet_name)
                   temp_df['School Affiliation'] = sheet_name  # Add school affiliation column
                   outreach_dataframes.append(temp_df)
               except Exception as e:
                   st.error(f"Error reading sheet '{sheet_name}': {e}")
           else:
               st.warning(f"Sheet '{sheet_name}' not found in the uploaded outreach file.")


       # Concatenate outreach data
       if outreach_dataframes:
           outreach_df = pd.concat(outreach_dataframes, ignore_index=True)
           st.success("Outreach data combined successfully!")
           st.write(f"Outreach Data Shape: {outreach_df.shape}")
       else:
           st.warning("No valid outreach sheets were processed.")
           outreach_df = pd.DataFrame()


       # Load Event File
       st.write("Processing Event File...")
       events_df = pd.read_excel(uploaded_event)
       st.write(f"Event Data Shape: {events_df.shape}")


       # Data cleaning and matching logic
       growth_officer_mapping = {
           'Ileana': 'Ileana Heredia', 'BK': 'Brian Kahmar', 'JR': 'Julia Racioppo',
           'Jordan': 'Jordan Richied', 'VN': 'Veronica Nims', 'vn': 'Veronica Nims',
           'Dom': 'Domenic Noto', 'Megan': 'Megan Sterling', 'Veronica': 'Veronica Nims',
           'SB': 'Sheena Barlow', 'Julio': 'Julio Macias', 'Mo': 'Monisha Donaldson'
       }


       if not outreach_df.empty:
           outreach_df['Growth Officer'] = outreach_df['Growth Officer'].replace(growth_officer_mapping)
           outreach_df['Date'] = pd.to_datetime(outreach_df['Date'], errors='coerce')
           outreach_df = outreach_df.dropna(subset=['Date'])
      
       events_df['Date of the Event'] = pd.to_datetime(events_df['Date of the Event'], errors='coerce')
       events_df = events_df.dropna(subset=['Date of the Event'])


       # Check for 'Date of the Event' column
       if 'Date of the Event' not in events_df.columns:
           st.error("The column 'Date of the Event' is missing in the Event Debrief file. Please upload a correct file.")
           st.stop()


       # Standardize column names
       outreach_df.columns = outreach_df.columns.str.strip()
       events_df.columns = events_df.columns.str.strip()


       # Standardize Growth Officer names
       outreach_df['Growth Officer'] = outreach_df['Growth Officer'].replace(growth_officer_mapping)


       # Convert date columns to datetime
       outreach_df['Date'] = pd.to_datetime(outreach_df['Date'], errors='coerce')
       events_df['Date of the Event'] = pd.to_datetime(events_df['Date of the Event'], errors='coerce')


       # Drop rows with NaT in date columns
       outreach_df = outreach_df.dropna(subset=['Date'])
       events_df = events_df.dropna(subset=['Date of the Event'])


       # Match outreach records with events within a 10-day range
       matched_records = []
       unmatched_outreach = outreach_df.copy()
       unmatched_event = events_df.copy()


       for _, outreach_row in outreach_df.iterrows():
           outreach_date = outreach_row['Date']
           matching_events = events_df[
               (events_df['Date of the Event'] >= outreach_date - pd.Timedelta(days=10)) &
               (events_df['Date of the Event'] <= outreach_date)
           ]


           if not matching_events.empty:
               combined_event_name = "/".join(matching_events['Event Name'].unique())
               combined_event_location = "/".join(matching_events['Location'].unique())
               combined_event_officer = "/".join(matching_events['Name'].unique())
               combined_row = {
                   'Outreach Date': outreach_date,
                   'Growth Officer': outreach_row.get('Growth Officer', ''),
                   'Outreach Name': outreach_row.get('Name', ''),
                   'Occupation': outreach_row.get('Occupation', ''),
                   'Email': outreach_row.get('Email', ''),
                   'Date of the Event': matching_events['Date of the Event'].values[0],
                   'Event Location': combined_event_location,
                   'Event Name': combined_event_name,
                   'Event Officer': combined_event_officer
               }
               matched_records.append(combined_row)
               unmatched_outreach = unmatched_outreach[unmatched_outreach['Date'] != outreach_row['Date']]
               unmatched_event = unmatched_event[~unmatched_event['Date of the Event'].isin(matching_events['Date of the Event'])]
           else:
               matched_records.append({
                   'Outreach Date': outreach_row['Date'],
                   'Growth Officer': outreach_row.get('Growth Officer', ''),
                   'Outreach Name': outreach_row.get('Name', ''),
                   'Occupation': outreach_row.get('Occupation', ''),
                   'Email': outreach_row.get('Email', ''),
                   'Date of the Event': None,
                   'Event Location': None,
                   'Event Name': None,
                   'Event Officer': None,
                   'Select Your School': None,
                   'Request type?': None,
                   'Audience': None
               })


       for _, event_row in unmatched_event.iterrows():
           matched_records.append({
               'Outreach Date': None,
               'Growth Officer': None,
               'Outreach Name': None,
               'Occupation': None,
               'Email': None,
               'Date of the Event': event_row['Date of the Event'],
               'Event Location': event_row['Location'],
               'Event Name': event_row['Event Name'],
               'Event Officer': event_row['Name'],
               'Select Your School': event_row['Select Your School'],
               'Request type?': event_row['Request type?'],
               'Audience': event_row['Audience']
           })


       final_df = pd.DataFrame(matched_records)
       st.success("Data matching completed!")
       st.write(f"Final Matched Data Shape: {final_df.shape}")
       st.dataframe(final_df)


       # Save final data to CSV
       final_df.to_csv('FINAL.csv', index=False)
       st.download_button(
           label="Download Matched Data as CSV",
           data=final_df.to_csv(index=False).encode('utf-8'),
           file_name='FINAL.csv',
           mime='text/csv'
       )
   except Exception as e:
       st.error(f"An error occurred: {e}")
else:
   st.info("Please upload both Member Outreach and Event Debrief files to proceed.")



